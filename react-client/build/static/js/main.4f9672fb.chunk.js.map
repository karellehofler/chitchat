{"version":3,"sources":["components/inputs/index.js","components/ChatRoom.js","components/displays/index.js","components/UserSignIn.js","App.js","reportWebVitals.js","index.js"],"names":["InputContainer","children","isInline","width","className","style","Button","handleClick","label","classes","props","onClick","UsernameInput","username","setUsername","for","type","name","value","onChange","MessageInput","message","setMessage","handleSubmit","handleChange","placeholder","RoomHeader","room","MessageBubble","float","time","MessageFeed","messages","user","id","map","ChatRoom","socket","setRoom","useState","setMessages","currentMessage","setCurrentMessage","sendMessage","e","a","messageData","Date","now","getHours","getMinutes","preventDefault","emit","list","useEffect","on","data","messageList","console","log","action","target","onKeyPress","key","Branding","margin","padding","borderRadius","UserSignIn","setChat","io","connect","process","App","chat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f9672fb.chunk.js","sourcesContent":["import React from 'react';\r\nimport { chatRooms } from '../../enums';\r\n// import M from \"materialize-css/dist/js/materialize.min.js\";\r\n\r\nconst InputContainer = ({ children, isInline, width }) => (\r\n    <div className={!width && `row`} style={{ width: `${width}`}}>\r\n        <form className=\"col s12\">\r\n            <div className=\"row\">\r\n                <div className={`input-field col s12 ${isInline ? `inline` : ``}`}>\r\n                    {children}\r\n                </div>\r\n            </div>\r\n        </form>\r\n    </div>\r\n)\r\n\r\nconst Button = ({ handleClick, label, classes, ...props}) => (\r\n    <>\r\n        <button className={`btn waves-light waves-effect ${classes && classes}`} \r\n        onClick={handleClick} {...props}>\r\n            {label}\r\n        </button>\r\n    </>\r\n)\r\n\r\nconst UsernameInput = ({ username, setUsername, handleClick }) =>  (\r\n    <InputContainer isInline width=\"50%\">\r\n        <label for=\"username\">Username</label>\r\n        <input type=\"text\" className=\"validate col s9 m9\" \r\n        name=\"username\" value={username}\r\n        onChange={setUsername}  />\r\n         <Button label=\"Enter\" classes=\"white light-blue-text text-darken-1 col s3 m3\" \r\n        handleClick={handleClick} />\r\n    </InputContainer>\r\n)\r\n\r\nconst MessageInput = ({ message, setMessage, handleSubmit, handleChange, ...props }) => (\r\n    <>\r\n        <InputContainer isInline>\r\n            <input type=\"text\" placeholder=\"What would you like to say?\" \r\n            className=\"validate col s10\" name=\"message-input\" value={message}\r\n            {...props} onChange={setMessage} />\r\n            <Button type=\"submit\" classes=\"col s2 light-blue darken-2\" \r\n            label=\"Send\" handleClick={handleSubmit} />\r\n        </InputContainer>\r\n    </>\r\n)\r\n\r\nconst RoomSelect = ({ setRoom }) => {\r\n\r\n    // useEffect(() => {\r\n    //     document.addEventListener('DOMContentLoaded', function() {\r\n    //         // var elems = document.querySelectorAll('select');\r\n    //         M.AutoInit();\r\n    //     });\r\n    // }, [])\r\n\r\n    return(\r\n        <InputContainer>\r\n            <select className=\"browser-default\" onChange={setRoom}>\r\n                {chatRooms && chatRooms.map((room) => (\r\n                    <option key={room.id} value={room.name}>\r\n                        {room.name}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n        </InputContainer>\r\n    )\r\n}\r\n\r\nexport { UsernameInput, MessageInput, RoomSelect, Button }","import React, { useState, useEffect } from 'react';\r\nimport { MessageInput } from './inputs';\r\nimport { ToastContainer } from 'react-toastify';\r\n\r\nconst RoomHeader = ({ room }) => (\r\n    <div className=\"chat-room-header z-depth-2\">\r\n        <div className=\"chat-room-title\">\r\n            {room && <h2>{room}</h2>}\r\n        </div>\r\n    </div>\r\n)\r\n\r\nconst MessageBubble = ({ message, float }) => (\r\n    <div className=\"row\">\r\n        {/* {align == \"right\" : } */}\r\n        <div className={`chat-bubble ${float === 'left' ? `left` : `right`}`}>\r\n            <div className={`card-panel ${ float === 'right' ? ` pink lighten-1` : `blue darken-2`} small`}>\r\n                <span className=\"white-text flow-text\">{message.message}</span>\r\n            </div>\r\n            <span>{message.username} | {message.time}</span>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nconst MessageFeed = ({ messages, user }) => (\r\n    <div className=\"row chat-room-messages\">\r\n        <div id=\"messages-container\" className=\"col s12\">\r\n            {messages && messages.map((message) => (\r\n                <MessageBubble message={message}\r\n                float={user === message.username ? \"right\" : \"left\"} />\r\n            ))}\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default function ChatRoom({ socket, username, room, setRoom }) {\r\n    \r\n    const [ messages, setMessages ] = useState([]);\r\n    const [ currentMessage, setCurrentMessage ] = useState(\"\");\r\n    \r\n    const sendMessage = async (e) => {\r\n       if(currentMessage !== \"\") {\r\n            const messageData = {\r\n                room: room,\r\n                username: username,\r\n                message: currentMessage,\r\n                time: new Date(Date.now()).getHours() +\r\n                \":\" + new Date(Date.now()).getMinutes(),\r\n            };\r\n\r\n            e.preventDefault();\r\n            await socket.emit(\"send_message\", messageData);\r\n            setMessages((list) => [...list, messageData]);\r\n            // scrollToBottom();\r\n            setCurrentMessage(\"\");\r\n       }\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on(\"receive_message\", (data) => {\r\n            setMessages((messageList) => [...messageList, data ]);\r\n        });\r\n\r\n        socket.on(\"join_room\", (data) => {\r\n            // toast(data);\r\n            console.log(data);\r\n        })\r\n\r\n    }, [socket]);\r\n\r\n    return (\r\n        <>\r\n            <ToastContainer />\r\n            <RoomHeader room={room} />\r\n            <MessageFeed messages={messages} user={username}/>\r\n            <form className=\"chat-bar\" action=\"\">\r\n                <MessageInput message={currentMessage} \r\n                setMessage={e => setCurrentMessage(e.target.value)}\r\n                onKeyPress={(e) => e.key === \"Enter\" && sendMessage}\r\n                handleSubmit={sendMessage} />\r\n            </form>           \r\n        </>\r\n    )\r\n}","const Branding = () => (\r\n    <div id=\"logo\">\r\n        <h1 className=\"flow-text\">\r\n            <span style={{ margin: '0px 5px' }} className=\"light-blue-text\">Chit</span>\r\n            <span style={{ padding: '10px', borderRadius: '10px'}} className=\"pink darken-1 white-text\">Chat</span>\r\n        </h1>\r\n    </div>\r\n);\r\n\r\nexport { Branding }","import React from 'react';\r\nimport { UsernameInput } from './inputs';\r\nimport { Branding } from './displays';\r\n\r\nexport default function UserSignIn({ username, setUsername, handleClick, setChat }) {\r\n\r\n    return (\r\n        <div id=\"chat-user\">\r\n            <Branding />\r\n            <UsernameInput username={username} \r\n            setUsername={setUsername}\r\n            handleClick={handleClick} />\r\n        </div>\r\n    )\r\n}","import { useState } from 'react';\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport './App.scss';\nimport 'react-toastify/dist/ReactToastify.css';\nimport io from 'socket.io-client';\nimport ChatRoom from './components/ChatRoom';\nimport UserSignIn from './components/UserSignIn';\n// import useLocalStorage from './hooks/useLocalStorage';\n\nconst socket = io.connect(process.env.REACT_APP_WEB_SOCKET_SERVER);\n\nfunction App() {\n  const [ username, setUsername ] = useState('');\n  const [ room, setRoom ] = useState(\"General\");\n  const [ chat, setChat ] = useState(false);\n\n  const joinRoom = () => {\n    if(username !== \"\" && room !== \"\") {\n      socket.emit(\"join_room\", room);\n      setChat(true);\n    }\n  }\n\n  // useEffect(() => {\n  //   if(username !== '') setChat(true);\n  // }, [username])\n\n  return (\n    <div className=\"App\">\n      {!chat ? \n      <UserSignIn username={username} \n      setUsername={(e) => setUsername(e.target.value)} \n      handleClick={joinRoom} />\n      :\n      <ChatRoom socket={socket} username={username} room={room} setRoom={setRoom} />\n      }\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}